{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "neuralNetwork.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "bhPwMR-pZZ6m"
      },
      "source": [
        "import torch"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kihf8iXoVYt4",
        "outputId": "62397628-1497-4dd6-a2c2-ebb41a7e405b"
      },
      "source": [
        "x=torch.Tensor([[1,0,1,0],[1,0,1,1],[0,1,0,1]])\r\n",
        "y=torch.tensor([[1],[1],[0]])\r\n",
        "print(x)\r\n",
        "print(y)\r\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tensor([[1., 0., 1., 0.],\n",
            "        [1., 0., 1., 1.],\n",
            "        [0., 1., 0., 1.]])\n",
            "tensor([[1],\n",
            "        [1],\n",
            "        [0]])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ON7xrZ57WAlC"
      },
      "source": [
        "def sigmoid(x):\r\n",
        "  return 1/(1+torch.exp(-x))\r\n",
        "\r\n",
        "def derivative_sigmoid(x):\r\n",
        "  return sigmoid(x)*(1-sigmoid(x))\r\n",
        "\r\n"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YJEGWUU9Wipd"
      },
      "source": [
        "epoch=7000\r\n",
        "lr=0.01\r\n",
        "inp_layer_neurons=x.shape[1]\r\n",
        "hid_layer_neurons=3\r\n",
        "out_layer_neurons=1\r\n",
        "wh=torch.randn(inp_layer_neurons,hid_layer_neurons).type(torch.FloatTensor)\r\n",
        "bh=torch.randn(1,hid_layer_neurons).type(torch.FloatTensor)\r\n",
        "wout=torch.randn(hid_layer_neurons,out_layer_neurons).type(torch.FloatTensor)\r\n",
        "bout=torch.randn(1,out_layer_neurons).type(torch.FloatTensor)\r\n"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "46KpsTcwYNnz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "194d87b8-8c20-4135-a723-360491e35ed3"
      },
      "source": [
        "for i in range(epoch):\r\n",
        "  hid_layer_input1=torch.mm(x,wh)\r\n",
        "  hid_layer_input=hid_layer_input1+bh\r\n",
        "  hid_layer_activations=sigmoid(hid_layer_input)\r\n",
        "\r\n",
        "  out_layer_input1=torch.mm(hid_layer_activations,wout)\r\n",
        "  hid_layer_input=out_layer_input1+bout\r\n",
        "  output=sigmoid(hid_layer_input)\r\n",
        "\r\n",
        "  E_d= y-output\r\n",
        "  slope_ol=derivative_sigmoid(output)\r\n",
        "  slope_hl=derivative_sigmoid(hid_layer_activations)\r\n",
        "  d_o=E_d*slope_ol\r\n",
        "  err_h=torch.mm(d_o,wout.t())\r\n",
        "  d_h=err_h*slope_hl\r\n",
        "  wout+=torch.mm(hid_layer_activations.t(),d_o)*lr\r\n",
        "  bout+=d_o.sum()*lr\r\n",
        "  wh+=torch.mm(x.t(),d_h)*lr\r\n",
        "  bh+=d_h.sum()*lr\r\n",
        "\r\n",
        "print(\"actual : \",y)\r\n",
        "print(\"output : \",output)\r\n",
        "  \r\n"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "actual :  tensor([[1],\n",
            "        [1],\n",
            "        [0]])\n",
            "output :  tensor([[0.9586],\n",
            "        [0.9228],\n",
            "        [0.1471]])\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}